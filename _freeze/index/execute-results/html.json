{
  "hash": "51a3953e50c87ad8cf9621615d74690f",
  "result": {
    "markdown": "---\ntitle: Introduction\ncode-fold: true\nexecute:\n  freeze: true\n  eval: false\n---\n\nThis is work in progress!\n\n::: {#7f417cb7 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pygimli as pg\nfrom pygimli.frameworks.lsqrinversion import LSQRInversion\nfrom pygimli.physics.ert import VESModelling\n```\n:::\n\n\n::: {#1fd5cf51 .cell execution_count=2}\n``` {.python .cell-code}\nnlay = 4\nlam = 200.0\nerrPerc = 3.0\nab2 = np.logspace(-1, 2, 50)\nmn2 = ab2 / 3.0\nf = VESModelling(ab2=ab2, mn2=mn2, nLayers=nlay)\nsynres = [100., 500., 20., 800.]  # synthetic resistivity\nsynthk = [0.5, 3.5, 6.]  # synthetic thickness (nlay-th layer is infinite)\nrhoa = f(synthk+synres)\nrhoa = rhoa * (pg.randn(len(rhoa)) * errPerc / 100. + 1.)\npg.plt.loglog(rhoa, ab2, \"x-\");\n```\n:::\n\n\n::: {#b06d2ff8 .cell execution_count=3}\n``` {.python .cell-code}\ntLog = pg.trans.TransLog()\ninv = LSQRInversion(fop=f, verbose=False)\ninv.LSQRiter = 20\n# inv = pg.Inversion(fop=f)\ninv.dataTrans = tLog\ninv.modelTrans = tLog\nstartModel = pg.cat(pg.Vector(nlay-1, 8), pg.Vector(nlay, pg.median(rhoa)))\ninv.inv.setMarquardtScheme()\nmodel1 = inv.run(rhoa, pg.Vector(len(rhoa), errPerc/100), lam=1000, startModel=startModel)\nprint(model1)\nprint(inv.chi2(), inv.relrms(), pg.sum(inv.model[:nlay-1]))\nG = pg.Matrix(rows=1, cols=len(startModel))\nfor i in range(3):\n    G.setVal(0, i, 1)\n\nc = pg.Vector(1, pg.sum(synthk))\ninv.setParameterConstraints(G, c, 100)\nmodel2 = inv.run(rhoa, pg.Vector(len(rhoa), errPerc/100), lam=1000, startModel=startModel)\nprint(model2)\nprint(inv.chi2(), inv.relrms(), pg.sum(inv.model[:nlay-1]))\n```\n:::\n\n\n::: {#b9d0c5db .cell execution_count=4}\n``` {.python .cell-code}\nfig, ax = pg.plt.subplots()\nax.loglog(rhoa, ab2, \"x\")\nax.loglog(inv.response, ab2, \"-\")\nax.grid(True)\n```\n:::\n\n\n::: {#fc8d5edd .cell execution_count=5}\n``` {.python .cell-code}\nfig, ax = pg.plt.subplots()\npg.viewer.mpl.drawModel1D(ax, synthk, synres, plot=\"semilogx\", label=\"synth\")\npg.viewer.mpl.drawModel1D(ax, model=model1, label=\"unconstrained\")\npg.viewer.mpl.drawModel1D(ax, model=model2, label=\"constrained\")\nax.set_ylim(15, 0)\nax.grid(True)\nax.legend();\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}