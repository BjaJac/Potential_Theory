[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Potential Theory",
    "section": "",
    "text": "This is a Quarto book.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pygimli as pg\nfrom pygimli.frameworks.lsqrinversion import LSQRInversion\nfrom pygimli.physics.ert import VESModelling\n\n\nnlay = 4\nlam = 200.0\nerrPerc = 3.0\nab2 = np.logspace(-1, 2, 50)\nmn2 = ab2 / 3.0\nf = VESModelling(ab2=ab2, mn2=mn2, nLayers=nlay)\nsynres = [100., 500., 20., 800.]  # synthetic resistivity\nsynthk = [0.5, 3.5, 6.]  # synthetic thickness (nlay-th layer is infinite)\nrhoa = f(synthk+synres)\nrhoa = rhoa * (pg.randn(len(rhoa)) * errPerc / 100. + 1.)\npg.plt.loglog(rhoa, ab2, \"x-\");\n\n\n\n\n\ntLog = pg.trans.TransLog()\ninv = LSQRInversion(fop=f, verbose=False)\ninv.LSQRiter = 20\n# inv = pg.Inversion(fop=f)\ninv.dataTrans = tLog\ninv.modelTrans = tLog\nstartModel = pg.cat(pg.Vector(nlay-1, 8), pg.Vector(nlay, pg.median(rhoa)))\ninv.inv.setMarquardtScheme()\nmodel1 = inv.run(rhoa, pg.Vector(len(rhoa), errPerc/100), lam=1000, startModel=startModel)\nprint(model1)\nprint(inv.chi2(), inv.relrms(), pg.sum(inv.model[:nlay-1]))\nG = pg.Matrix(rows=1, cols=len(startModel))\nfor i in range(3):\n    G.setVal(0, i, 1)\n\nc = pg.Vector(1, pg.sum(synthk))\ninv.setParameterConstraints(G, c, 100)\nmodel2 = inv.run(rhoa, pg.Vector(len(rhoa), errPerc/100), lam=1000, startModel=startModel)\nprint(model2)\nprint(inv.chi2(), inv.relrms(), pg.sum(inv.model[:nlay-1]))\n\n23/08/23 - 13:09:13 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:13 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:13 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:13 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:13 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:13 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:13 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:14 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:14 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:14 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:14 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:14 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:14 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:14 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:14 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:14 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:14 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n23/08/23 - 13:09:15 - pyGIMLi - WARNING - Multiprocess Jacobian currently unavailable for Win32 and Mac.\n\n\n\n\n7 [0.4937320819915976, 3.370781257178004, 11.863253437946202, 100.244873681884, 492.5077484604116, 37.28200242608787, 1045.9704195687327]\n0.9116070650973334 2.8871842012948012 15.727766777115804\n\n\n7 [0.48251903575283134, 3.774936430815615, 5.819316774128112, 100.07046215540682, 462.4530830287375, 18.878951248500222, 894.798506720426]\n0.9810996731541719 2.9790719041838205 10.07677224069656\n\n\n\nfig, ax = pg.plt.subplots()\nax.loglog(rhoa, ab2, \"x\")\nax.loglog(inv.response, ab2, \"-\")\nax.grid(True)\n\n\n\n\n\nfig, ax = pg.plt.subplots()\npg.viewer.mpl.drawModel1D(ax, synthk, synres, plot=\"semilogx\", label=\"synth\")\npg.viewer.mpl.drawModel1D(ax, model=model1, label=\"unconstrained\")\npg.viewer.mpl.drawModel1D(ax, model=model2, label=\"constrained\")\nax.set_ylim(15, 0)\nax.grid(True)\nax.legend();"
  }
]